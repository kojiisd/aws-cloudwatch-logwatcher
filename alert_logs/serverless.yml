# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: my-service

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
# frameworkVersion: "=X.X.X"

provider:
  name: aws
  runtime: python3.6

# you can overwrite defaults here
  stage: dev
  region: us-west-2

# you can add statements to the Lambda function's IAM Role here
  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:GetObject"
        - "s3:PutObject"
        - "logs:DescribeLogGroups"
        - "logs:DescribeLogStreams"
        - "logs:GetLogEvents"
        - "lambda:InvokeFunction"
        - "sns:Publish"
        - "dynamodb:DescribeTable"
        - "cloudwatch:GetMetricStatistics"
      Resource: "*"


  timeout: 10

# you can define service wide environment variables here
#  environment:
#    variable1: value1

  environment:
    ALERT_LOG_BUCKET: ${self:service}-alert-logs-${self:provider.stage}
    ALERT_LOG_KEY: 'last_alert_updated_time'
    ALERT_LOG_PATTERN: 'Exception|Error'
    ALERT_LOG_TOPIC_ARN: 'arn:aws:sns:us-west-2:381354997016:tmp_mail_test'
    ALERT_LOG_SUBJECT: 'subject for cloudwatch alert.'
    # ログ収集の粒度。カンマ区切りで複数指定可能。prefixごとの結果がメールで送信される。
    ALERT_LOGS_TARGET_PREFIX: '/aws/lambda'

    FILTERED_ALERT_LOGS: ${self:service}-${self:provider.stage}-filteredAlertLogs

    THRESHOLD_VALUE: 0.5
    THRESHOLD_TIME: 5
    DYNAMODB_TABLE: 'test_table'
# you can add packaging information here
#package:
#  include:
#    - include-me.py
#    - include-me-dir/**
#  exclude:
#    - exclude-me.py
#    - exclude-me-dir/**

functions:

  alertLogs:
    handler: src/alert_logs.lambda_handler_alert_logs
    description: 【バッチ】CloudWatchログ定期監視スクリプト(親)
    events:
      - schedule: rate(1 day)
    timeout: 30

  filteredAlertLogs:
    handler: src/alert_logs.lambda_handler_filtered_alert_logs
    description: 【バッチ】CloudWatchログ定期監視スクリプト(子)
    timeout: 300

  dynamoDBMonitor:
    handler: src/dynamodb_monitor.monitor_dynamodb
    description: DynamoDBの読み／書きキャパシティユニットを定期的に監視するスクリプト
    events:
      - schedule: rate(1 hour)
    timeout: 30

#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here

resources:
  Resources:

    ### S3 ###

    AlertLogs:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:service}-alert-logs-${self:provider.stage}

    ### CloudWatch Logs ###

    AlertLogsLogGroup:
      Properties:
        RetentionInDays: 7

    FilteredAlertLogsLogGroup:
      Properties:
        RetentionInDays: 7

